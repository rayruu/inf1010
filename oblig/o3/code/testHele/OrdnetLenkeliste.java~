import java.util.Iterator;

public class OrdnetLenkeliste<T extends Comparable<T>> extends Lenkeliste<T> implements Liste<T> {
    private int antall;

    public OrdnetLenkeliste() {
	this.antall = 0;
    }

   public void settInn(T data) {
       
       if (erTom()) {
	   settInnForan(data);
       }
       else if((erTom() != true)) {
	   initIterasjon();
	   boolean settInn = true;

	   while ((harNeste() == true) && (settInn == true)) {
	       if (data.compareTo(hentData()) <= 0) {
		   
		   if (harForrige() == false) {
		       settInnForan(data);
		   }
		   else {
		       settInnMellom(data);
		   }

		   settInn = false;
		   
	       }
	       else if (harNeste() != true) {
		   settInnBak(data);
		   settInn = false;
		   
	       }
	       
	       neste();
	   }
       }
       
       this.antall ++;
   }       


    public T fjern() {
	antall --;
	return super.fjernForan();
    }

    public boolean erTom() {
	return this.antall == 0;
    }
    
    public int storrelse() {
	return this.antall;
    }

    // iterator
    public Iterator<T> iterator() {
	return new ListeIterator();
    }

    public void initIterasjon () {
	super.settNesteNode();
    }

    public boolean harNeste() {
	return super.harNeste();
    }

    public T neste() {
	return super.neste();
    }
   

    private class ListeIterator implements Iterator<T> {
	// Konstruktoer
	public ListeIterator() {
	    initIterasjon();
	}
	
	public boolean hasNext() {
	    return harNeste();
	}
	
	public T next() {
	    return neste();
	}
    }    


}
